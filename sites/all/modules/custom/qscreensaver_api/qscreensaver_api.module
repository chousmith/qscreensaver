<?php
/**
 * #todo : move the 2 CONTENT TYPES + 4 IMAGE STYLES + 1 VIEW into this module?
 */
/**
 * hook_menu
 */
function qscreensaver_api_menu() {
  $items = array(
		'xml' => array(
			'title' => 'XML API',
			'page callback' => 'qscreensaver_api_xml',
			'access arguments' => array('access content'),
			'type' => MENU_NORMAL_ITEM,
		),
    'admin/content/dimensions' => array(
      'title' => 'Device Dimensions',
      'page callback' => 'qscreensaver_api_dimensions_list',
      'access arguments' => array('administer nodes'),
      'type' => MENU_NORMAL_ITEM,
    )
	);
	return $items;
}
/**
 * specify our log messages name here in 1 place
 */
function qscreensaver_api_logmsg() {
  return 'qss api';
}
/**
 * callback to generate our XML grouping Slides
 * by Portrait/Landscape (content type) + Folder Name (Category taxonomy)
 */
function qscreensaver_api_xml() {
  $folder = arg(1);
  if ( ( $folder === 'all' ) || ( $folder === 'example' ) ) {
    $folder = null;
  }
  if ( function_exists('watchdog') ) {
    $msg = qscreensaver_api_logmsg();
    watchdog( $msg, '/'. arg(0) .'/'. arg(1) .'/'. arg(2) .'/'. arg(3) );
  }
	header('Content-Type: text/xml');

  $xml = '<?xml version="1.0" encoding="UTF-8" ?>
	<rss version="2.0" xml:base="http://screensaver.deviceshowcase.com/" xmlns:atom="http://www.w3.org/2005/Atom">
		<channel>
			<title>Qualcomm Screensaver</title>
			<link>http://screensaver.deviceshowcase.com/</link>
			<atom:link rel="self" href="http://screensaver.deviceshowcase.com/xml" />
			<pubDate>Wed, 14 Nov 2013 16:43:58 -0600</pubDate>
			<lastBuildDate>Wed, 15 Nov 2013 12:24:20 -0500</lastBuildDate>';
	// load our slides & group em		
	$slides = views_get_view_result( 'slides_xml', null, $folder );
	$folders = array();
	
	$mode = '';
	$group = '';
	$enabled = true;
	$flags = array();
	$flag = false;
	if ( function_exists('flag_get_flag') ) {
		$flag = flag_get_flag('defaultenabled');
	}
	
	foreach ( $slides as $s ) {
    $smode = $s->node_type;
    $sgroup = $s->field_field_slide_category[0]['raw']['taxonomy_term']->name;
		if ( ( $smode != $mode ) || ( $sgroup != $group ) ) {
			// new group
			$mode = $s->node_type;
			$group = $s->field_field_slide_category[0]['raw']['taxonomy_term']->name;
      // sanitize/standardize group name
      $group = str_replace( ' ', '', str_replace( '_', '', $group ) );
      $group = strtolower( $group );
			
			$fs = ( $mode == 'portrait_slide' ? 'portrait' : 'landscape' ) .'_';
			$fk = $fs . $group;
			
			$tid = $s->field_data_field_slide_category_field_slide_category_tid;
			
			if ( !isset( $flags[$tid] ) ) {
				$enabled = true;
				
				// check for actual flag
				if ( $flag !== false ) {
					$enabled = $flag->is_flagged($tid);
				}
				
				$flags[$tid] = $enabled;
			} else {
				$enabled = $flags[$tid];
			}
			
			$folders[$fk] = array(
				'enabled' => $enabled ? 'true' : 'false',
				'items' => array()
			);
		}
		
		$image = image_style_path( 's', $s->file_managed_file_usage_uri );
		// http://drupal.stackexchange.com/a/76827
		$image_uri = $s->file_managed_file_usage_uri; // or any public://my_image
		$style = 's';
		$src = image_style_path($style, $image_uri);
		$ok = file_exists($src);
    if ( !$ok ) {
      $ok = image_style_create_derivative($style, $image_uri, $src);
    }
		
		$new_image_url = file_create_url($src);
		$image = $new_image_url;
		/* and then */
		$image_info = image_get_info( $src );
    /*
    $logmsg = 'image '. $image .' : src '. $src;
    $logmsg .= ' info : <pre>'. print_r($image_info,true) .'</pre>';
		//watchdog('img chk', $logmsg );
		*/
		$folders[$fk]['items'][] = array(
			'source' => file_create_url( $image ),
			'filesize' => $image_info['file_size'],
		);
	}
  
	$xml .= '<folders count="'. count($folders) .'">';
	foreach ( $folders as $k => $v ) {
    $c = count( $v['items'] );
    $e = $v['enabled'];
		$xml .= '
				<folder name="'. $k .'" count="'. $c .'" enabled="'. $e .'">';
				
		foreach ( $v['items'] as $i ) {
			$xml .= '
					<item>
						<source>'. $i['source'] .'</source>
						<filesize>'. $i['filesize'] .'</filesize>
					</item>';
		}
		
		$xml .= '
				</folder>';
	}
	$xml .= '
			</folders>
		</channel>
	</rss>';
	print $xml;
	drupal_exit();
}
/**
 * callback query "watchdog" table for our "qss api" log messages
 * and aggregate the log infos to show a table list of Dimensions
 */
function qscreensaver_api_dimensions_list() {
  $oot = '';
  $msgtype = qscreensaver_api_logmsg();
  
  if ( !function_exists('watchdog') ) {
    $oot = '<h1>You must enable the "Database logging" module in order to track Device dimensions via API</h1>';
  } else {
    $oot = '<h1>Device Dimensions as logged by the API</h1>';
    // query "watchdog" for our messages
    $result = db_query("SELECT message FROM {watchdog} WHERE type = :type", array(
      ':type' => $msgtype
    ));
    // init vars to hold aggregated results
    $nonefound = true;
    $dimensions = array();
    $rows = array();
    
    if ( $result ) {
      // loop through our db_query rows
      while ( $row = $result->fetchAssoc() ) {
        // got at least 1, so
        $nonefound = false;
        // log logs /xml/{folder}/d1/d2 so EXPLODE to find actual dimensions
        $log = $row['message'];
        $log = explode( '/', $log );
        $size = '';
        $d1 = '';
        $d2 = '';
        if ( isset( $log[3] ) ) {
          $d1 = intval( $log[3] );
          if ( $d1 === 0 ) {
            $d1 = '';
          } else {
            if ( isset( $log[4] ) ) {
              $d2 = intval( $log[4] );
            } else {
              $d2 = '';
            }
          }
        } else {
          $d1 = '';
        }
        if ( ( $d1 !== '' ) && ( $d2 !== '' ) ) {
          if ( $d1 > $d2 ) {
            $size = $d1 .'x'. $d2;
          } else {
            $size = $d2 .'x'. $d1;
          }
        } else {
          $size = 'dimensions not found';
        }
        // $dimensions stores count & sub array of all URLs (messages)
        if ( isset( $dimensions[ $size ] ) ) {
          // if already set, then just inc count(s)
          $dimensions[ $size ]['count']++;
          
          if ( isset ( $dimensions[ $size ]['logs'][ $row['message'] ] ) ) {
            $dimensions[ $size ]['logs'][ $row['message'] ]++;
          } else {
            $dimensions[ $size ]['logs'][ $row['message'] ] = 1;
          }
        } else {
          // this is a new size, so set up that one
          $dimensions[ $size ] = array(
            'count' => 1,
            'logs' => array( $row['message'] => 1 )
          );
        }
      }
      // now that we have all sizes in the array, sort it
      ksort( $dimensions );
      // & loop to better formatted rows for theme('table'...)
      foreach ( $dimensions as $s => $v ) {
        // get the 'logs' array
        $logs = $v['logs'];
        // sort the 'logs' array
        ksort( $logs );
        // flatten the 'logs' array
        $logd = '';
        foreach ( $logs as $l => $c ) {
          $logd .= $l;
          if ( $c > 1 ) {
            $logd .= ' ('. $c .' times)';
          }
          $logd .= '<br />';
        }
        // add parentheses for fun?
        if ( $s === 'dimensions not found' ) {
          $s = '('. $s .')';
        }
        // and add to our $rows
        $rows[] = array(
          $s,
          $v['count'],
          $logd
        );
      }
    }
    if ( $nonefound ) {
      $oot .= "<p>No \"$msgtype\" watchdog log messages found?</p>";
    } else {
      $oot .= "<p>Querying {watchdog} database table for log messages of type \"$msgtype\" :</p>";
      //$oot .= '<pre>'. print_r($rows,true) .'</pre>';
      $hdr = array( 'Dimensions', 'Count', 'Logs' );
      $oot .= theme( 'table', array( 'header' => $hdr, 'rows' => $rows ) );
    }
  }
  return $oot;
}